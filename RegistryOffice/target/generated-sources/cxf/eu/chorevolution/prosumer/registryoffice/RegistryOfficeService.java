package eu.chorevolution.prosumer.registryoffice;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.6
 * 2022-08-31T14:56:22.745+02:00
 * Generated source version: 3.1.6
 * 
 */
@WebServiceClient(name = "RegistryOfficeService", 
                  wsdlLocation = "file:/C:/Users/miche/Desktop/BPD/RegistryOffice/src/main/resources/RegistryOffice.wsdl",
                  targetNamespace = "http://eu.chorevolution.farmbusinessstartup/registryoffice") 
public class RegistryOfficeService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://eu.chorevolution.farmbusinessstartup/registryoffice", "RegistryOfficeService");
    public final static QName RegistryOfficePort = new QName("http://eu.chorevolution.farmbusinessstartup/registryoffice", "RegistryOfficePort");
    static {
        URL url = null;
        try {
            url = new URL("file:/C:/Users/miche/Desktop/BPD/RegistryOffice/src/main/resources/RegistryOffice.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(RegistryOfficeService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:/C:/Users/miche/Desktop/BPD/RegistryOffice/src/main/resources/RegistryOffice.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public RegistryOfficeService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public RegistryOfficeService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public RegistryOfficeService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public RegistryOfficeService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public RegistryOfficeService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public RegistryOfficeService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns RegistryOfficePT
     */
    @WebEndpoint(name = "RegistryOfficePort")
    public RegistryOfficePT getRegistryOfficePort() {
        return super.getPort(RegistryOfficePort, RegistryOfficePT.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns RegistryOfficePT
     */
    @WebEndpoint(name = "RegistryOfficePort")
    public RegistryOfficePT getRegistryOfficePort(WebServiceFeature... features) {
        return super.getPort(RegistryOfficePort, RegistryOfficePT.class, features);
    }

}
